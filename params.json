{"name":"Cpp-manager","tagline":"This is a program I wrote that is basically a cpp console IDE. It can generate projects, classes, namespaces and more. It can also automatically build and run a project with one command and version controls.","body":"# CPP-Manager\r\nThis is a program I wrote that is basically a cpp console IDE. It can generate projects, classes, namespaces and more. It can automatically build and run a project with one command and it also does automatic version control using Git.\r\n\r\nI would recommend to put your projects at `~/cpp-workspace` but you don't have to by any means.\r\n\r\nTo use commands outside of `create project`, you need to be anywhere in your project's directory. The program \r\nwill automatically figure out which project you are talking about.\r\n\r\n# Usage\r\n\r\n## Creating A Project\r\n\r\nTo create a project called test, run the following command:\r\n\r\n```cpp-man create project <project name>```\r\n\r\n* `<project name>` is the name of your project and default namespace.\r\n\r\nThe following command will generate a tree as follows in the current directory you are at.\r\n\r\n```\r\ncpp-man create project test\r\n\r\ntest\r\n├── bin\r\n├── build\r\n│   └── test\r\n│       ├── Debug\r\n│       └── Release\r\n├── doc\r\n├── include\r\n├── lib\r\n│   └── compiled\r\n└── src\r\n    └── test\r\n        ├── doc\r\n        ├── include\r\n        └── src\r\n            └── Main.cpp\r\n```\r\n\r\n* 'bin' is where the final executable will go. Each executable will be \r\n\tnamed by the namespace that you build it from.\r\n* 'build' is where the CMake files, Makefiles, and object files are stored. \r\n\tThe build folder is sorted into 'namespace / Debug/Release'\r\n* 'doc' is where the project documentation is held. Currently the doc generation is\r\n\tnot implemented, but will be added soon. It will be a compulation of each \r\n\tnamespace.\r\n* 'include' and 'lib' are for over-arching files. 'include' is where \r\n\theader files go and 'lib' is for cpp files. Complied is where the \r\n\tMakefile exports the compiled libraries too. The project does not currently\r\n\tnatively support .a and .so files. They must be built during building and are \r\n\tput in the lib/compiled to be reused instead of rebuilt on building.\r\n* 'src' is where the project source is. The src is sorted by namespaces and\r\n\tthe default namespace is the name of the project (in this case test). \r\n\tEach namespace is sorted into 'include', for header files, 'src', for \r\n\t.cpp files, and 'doc', for namespace documentation.\r\n\r\nupon creating a project, it will also init a git. It will also add all files \r\ndirectories and commit them with 'Initial project setup.'\r\n\r\nSidenote:\r\nFor installing a library, you should do the following:\r\n\r\n```\r\n├── include\r\n│   ├── test\r\n│   └── Util\r\n│       └── Print.h\r\n├── lib\r\n│   ├── compiled\r\n│   └── Util\r\n│       └── Print.cpp\r\n```\r\n\r\nTo use the library, just add the following:\r\n\r\n```\r\n#include \"include/Util/Print.h\"\r\n```\r\n\r\nThe default output of Main.cpp is the following:\r\n\r\n```C++\r\n\r\n/**\r\n\ttest::Main\r\n\tMain.cpp\r\n\tpurpose: \r\n\r\n\t@author Logan Rickert\r\n\t@version 0.0.0 07-21-2015 09:49:21\r\n\t@updated 07-21-2015 09:49:21\r\n*/\r\n\r\n#include <iostream>\r\n#include <string>\r\n\r\n\r\nusing namespace std;\r\n\r\nint main() {\r\n\r\n\tcout << \"Hello World\\n\";\r\n\r\n\treturn 0;\r\n\r\n}\r\n```\r\n\r\nDocumentation\r\n* Line 1 is the namespace::Filename\r\n* Line 2 is the filename\r\n* Line 3 is the reason this file exists\r\n* Line 4 is the author of the file\r\n* Line 5 is the 'version number' 'date the file was created; %m-%d-%Y %H:%M:S'.\r\n\tEvery time you build the project via cpp-man, the third zero will increment by \r\n\tone. If you increment the other numbers or reset the third number to 0, cpp-man will roll with it.\r\n* Line 6 is the date and time the file was last compiled.\r\n\t* This actually and line 5 no long works not that I think about it, lol.\r\n\r\n* Line 8 is the only instance of using namespace std in any classes or namespaces as it\r\n\tis not recommended to be used. You can stop this from being added by editing \r\n\tsrc/default_class.cpp.\r\n\r\n## Creating A Class\r\n\r\nTo create a class, do the following:\r\n\r\n```\r\ncpp-man create class <namespace> <class name> [class members]\r\n```\r\n\r\n* `<namespace>` is the name of the namespace inside of the project. If the namespace\r\n\tand project name are the same, you can sub this with a period.\r\n* `<class name>` is the name of the class.\r\n* `[class members]` are members you want cpp-man to automatically add. It will generate \r\n\tgetters and setters and a contructor([class members]) automatically.\r\n\r\nThe following are two examples, one with no [class members] arg, and one with one.\r\n\r\n```\r\ncpp-man create class test Person\r\n\r\ntree test/src/test\r\n├── doc\r\n├── include\r\n│   └── Person.h\r\n└── src\r\n    ├── Main.cpp\r\n    └── Person.cpp\r\n```\r\n\r\n```C++\r\n\r\n/**\r\n\ttest::Person\r\n\tPerson.cpp\r\n\tpurpose: \r\n\r\n\t@author Logan Rickert\r\n\t@version 0.0.0 07-21-2015 10:24:28\r\n\t@updated 07-21-2015 10:24:28\r\n*/\r\n\r\n#include \"test/include/Person.h\"\r\n\r\nPerson::Person() {\r\n\r\n}\r\n\r\nPerson::~Person() {\r\n\r\n}\r\n```\r\n\r\n```C++\r\n\r\n/**\r\n\ttest::Person\r\n\tPerson.h\r\n\tpurpose: \r\n\r\n\t@author Logan Rickert\r\n\t@version 0.0.0 07-21-2015 10:24:28\r\n\t@updated 07-21-2015 10:24:28\r\n*/\r\n\r\n#include <iostream>\r\n#include <string>\r\n\r\n#ifndef PERSON_H\r\n#define PERSON_H\r\n\r\nclass Person {\r\n\r\n\tpublic:\r\n\t\tPerson();\r\n\r\n\t\t~Person();\r\n\r\n\tprivate:\r\n\r\n};\r\n\r\n#endif\r\n```\r\n\r\n`#include \"test/include/Person.h\"` is automatically added to Main.cpp below `#include <string>`. If there are \r\nno library calls and two new lines below them, it won't actually work.\r\n\r\n```\r\ncpp-man create class . Student std::string name int age double gpa\r\n\r\ntree test/src/test\r\n├── doc\r\n├── include\r\n│   ├── Person.h\r\n│   └── Student.h\r\n└── src\r\n    ├── Main.cpp\r\n    ├── Person.cpp\r\n    └── Student.cpp\r\n```\r\n\r\n```C++\r\n\r\n/**\r\n\ttest::Student\r\n\tStudent.h\r\n\tpurpose: \r\n\r\n\t@author Logan Rickert\r\n\t@version 0.0.0 07-21-2015 10:30:26\r\n\t@updated 07-21-2015 10:30:26\r\n*/\r\n\r\n#include <iostream>\r\n#include <string>\r\n\r\n#ifndef STUDENT_H\r\n#define STUDENT_H\r\n\r\nclass Student {\r\n\r\n\tpublic:\r\n\t\tStudent();\r\n\t\tStudent(std::string, int, double);\r\n\r\n\t\t~Student();\r\n\r\n\t\tstd::string getName();\r\n\t\tint getAge();\r\n\t\tdouble getGpa();\r\n\r\n\t\tvoid setName(std::string sName);\r\n\t\tvoid setAge(int sAge);\r\n\t\tvoid setGpa(double sGpa);\r\n\r\n\tprivate:\r\n\t\tstd::string name;\r\n\t\tint age;\r\n\t\tdouble gpa;\r\n\r\n};\r\n\r\n#endif\r\n```\r\n\r\n```C++\r\n\r\n/**\r\n\ttest::Student\r\n\tStudent.cpp\r\n\tpurpose: \r\n\r\n\t@author Logan Rickert\r\n\t@version 0.0.0 07-21-2015 10:30:26\r\n\t@updated 07-21-2015 10:30:26\r\n*/\r\n\r\n#include \"test/include/Student.h\"\r\n\r\nStudent::Student() {\r\n\r\n}\r\n\r\nStudent::Student(std::string sName, int sAge, double sGpa) {\r\n\tname = sName;\r\n\tage = sAge;\r\n\tgpa = sGpa;\r\n}\r\n\r\nStudent::~Student() {\r\n\r\n}\r\n\r\nstd::string Student::getName() {\r\n\treturn name;\r\n}\r\n\r\nvoid Student::setName(std::string sName) {\r\n\tname = sName;\r\n}\r\n\r\nint Student::getAge() {\r\n\treturn age;\r\n}\r\n\r\nvoid Student::setAge(int sAge) {\r\n\tage = sAge;\r\n}\r\n\r\ndouble Student::getGpa() {\r\n\treturn gpa;\r\n}\r\n\r\nvoid Student::setGpa(double sGpa) {\r\n\tgpa = sGpa;\r\n}\r\n```\r\n\r\nAfter each new class generation, cpp-man automatically git add classname.cpp and classname.h \r\nand commits with the message: 'Added '$CLASS_NAME' cpp and h to '$namespace' namespace.'\r\n\r\n## Building\r\n\r\nTo build your namespace, do the following:\r\n\r\n```cpp-man build <namespace> [Default:Debug/Release] [No git commit]```\r\n* `<namespace>` is the name of the namespace you want to build. If the namespace is \r\n\tthe same as the project name, you can sub it for a peroid.\r\n* `[Default:Debug/Release]` is whether or not you want to build the namespace in\r\n\tdebug or release. No argument means it will build in Debug. You can also sub Debug for a peroid.\r\n* `[No git commit]` means if this argument is present, it will not run `git add .` `git commit -a`.\r\n\r\nAn example:\r\n\r\n```\r\ncpp-man build . Debug\r\n\r\nAdded a util print function and #include \"*.h\"s to Main.\r\n# Please enter the commit message for your changes. Lines starting\r\n# with '#' will be ignored, and an empty message aborts the commit.\r\n# On branch master\r\n# Changes to be committed:\r\n#       new file:   include/Util/Print.h\r\n#       new file:   lib/Util/Print.cpp\r\n#       modified:   src/test/src/Main.cpp\r\n#\r\n\r\nHello World\r\n```\r\n\r\nOur new tree for bin and build looks like this:\r\n\r\n```\r\ntest\r\n├── bin\r\n│   ├── old\r\n│   └── test\r\n├── build\r\n│   └── test\r\n│       ├── Debug\r\n│       │   ├── CMakeCache.txt\r\n│       │   ├── CMakeFiles\r\n│       │   │   ├── 2.8.12.2\r\n│       │   │   │   ├── CMakeCCompiler.cmake\r\n│       │   │   │   ├── CMakeCXXCompiler.cmake\r\n│       │   │   │   ├── CMakeDetermineCompilerABI_C.bin\r\n│       │   │   │   ├── CMakeDetermineCompilerABI_CXX.bin\r\n│       │   │   │   ├── CMakeSystem.cmake\r\n│       │   │   │   ├── CompilerIdC\r\n│       │   │   │   │   ├── a.out\r\n│       │   │   │   │   └── CMakeCCompilerId.c\r\n│       │   │   │   └── CompilerIdCXX\r\n│       │   │   │       ├── a.out\r\n│       │   │   │       └── CMakeCXXCompilerId.cpp\r\n│       │   │   ├── cmake.check_cache\r\n│       │   │   ├── CMakeDirectoryInformation.cmake\r\n│       │   │   ├── CMakeOutput.log\r\n│       │   │   ├── CMakeTmp\r\n│       │   │   ├── Makefile2\r\n│       │   │   ├── Makefile.cmake\r\n│       │   │   ├── progress.marks\r\n│       │   │   ├── TargetDirectories.txt\r\n│       │   │   └── test.dir\r\n│       │   │       ├── build.make\r\n│       │   │       ├── cmake_clean.cmake\r\n│       │   │       ├── CXX.includecache\r\n│       │   │       ├── DependInfo.cmake\r\n│       │   │       ├── depend.internal\r\n│       │   │       ├── depend.make\r\n│       │   │       ├── flags.make\r\n│       │   │       ├── home\r\n│       │   │       │   └── logan\r\n│       │   │       │       └── cpp-workspace\r\n│       │   │       │           └── test\r\n│       │   │       │               └── src\r\n│       │   │       │                   └── test\r\n│       │   │       │                       └── src\r\n│       │   │       │                           ├── Main.cpp.o\r\n│       │   │       │                           ├── Person.cpp.o\r\n│       │   │       │                           └── Student.cpp.o\r\n│       │   │       ├── link.txt\r\n│       │   │       └── progress.make\r\n│       │   ├── cmake_install.cmake\r\n│       │   ├── CMakeLists.txt\r\n│       │   └── Makefile\r\n│       └── Release\r\n```\r\n\r\nWhen you run `cpp-man build`, it generates a CMake file in the build/namespace/Debug directory.\r\nIt then runs the CMake file by running 'cmake -G \"Unix Makefiles\"'. The command will generate a\r\nMakefile in the Debug folder and cpp-man then runs 'make'. Once it's done, it runs 'git add .' and \r\n'git commit -a'. You can enter in a commit message and it will then run the new program.\r\n\r\nYou can view the new program at bin/namespace.\r\n\r\nThe following is the CMake file that was generated for test. (I'm still new to \r\nCMake so I'm sure you could optimize it by a lot.)\r\n\r\n```\r\ncmake_minimum_required(VERSION 2.8)\r\n\r\nproject(\"test\")\r\n\r\ninclude_directories(\"/home/logan/cpp-workspace/test/src\")\r\ninclude_directories(\"/home/logan/cpp-workspace/test/\")\r\n\r\nadd_executable(\"test\"\r\n\t\"/home/logan/cpp-workspace/test/src/test/src/Person.cpp\"\r\n\t\"/home/logan/cpp-workspace/test/src/test/src/Student.cpp\"\r\n\t\"/home/logan/cpp-workspace/test/src/test/src/Main.cpp\"\r\n)\r\n\r\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY /home/logan/cpp-workspace/test/lib/compiled)\r\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY /home/logan/cpp-workspace/test/lib/compiled)\r\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY /home/logan/cpp-workspace/test/bin)\r\n\r\nset_target_properties(\"test\"\r\n\tPROPERTIES\r\n\tARCHIVE_OUTPUT_DIRECTORY \"/home/logan/cpp-workspace/test/lib/compiled\"\r\n\tLIBRARY_OUTPUT_DIRECTORY \"/home/logan/cpp-workspace/test/lib/compiled\"\r\n\tRUNTIME_OUTPUT_DIRECTORY \"/home/logan/cpp-workspace/test/bin\"\r\n)\r\n```\r\n\r\n## Creating A New Namespace\r\n\r\nCreating a new namespace is super easy, just run:\r\n\r\n```\r\ncpp-man create namespace <namespace>\r\n```\r\n\r\n* `<namespace>` is the name of the namespace.\r\n\r\n```\r\ncpp-man create namespace testOther\r\n```\r\n\r\nYour tree of src should now look like this:\r\n\r\n```\r\ntree test/src/\r\n├── test\r\n│   ├── doc\r\n│   ├── include\r\n│   │   ├── Person.h\r\n│   │   └── Student.h\r\n│   └── src\r\n│       ├── Main.cpp\r\n│       ├── Person.cpp\r\n│       └── Student.cpp\r\n└── testOther\r\n    ├── doc\r\n    ├── include\r\n    └── src\r\n        └── Main.cpp\r\n```\r\n\r\nOn running the command, cpp-man will git add src/$namespace and commit with\r\nthe following: 'Added '$namespace' namespace and initial Main.cpp.'.\r\n\r\n## Libraries\r\n\r\nFile: `/test/src/test/src/Main.cpp`\r\n\r\n```C++\r\n#include <iostream>\r\n#include <string>\r\n\r\n#include \"test/include/Student.h\"\r\n#include \"test/include/Person.h\"\r\n#include \"include/Util/Print.h\"\r\n```\r\n\r\nFile: `/test/include/Util/Print.h`\r\n\r\n```C++\r\n\r\n/**\r\n\tUtil::Print\r\n\tPrint.h\r\n\tpurpose: \r\n\r\n\t@author Logan Rickert\r\n\t@version 0.0.0 07-21-2015 10:24:28\r\n\t@updated 07-21-2015 10:24:28\r\n*/\r\n\r\n#include <iostream>\r\n#include <string>\r\n\r\n#ifndef PRINT_H\r\n#define PRINT_H\r\n\r\nclass Print {\r\n\r\n\tpublic:\r\n\t\tPrint();\r\n\r\n\t\t~Print();\r\n\r\n\tprivate:\r\n\r\n};\r\n\r\n#endif\r\n```\r\n\r\nFile: `/test/lib/Util/Print.h`\r\n\r\n```C++\r\n\r\n/**\r\n\tUtil::Print\r\n\tPrint.cpp\r\n\tpurpose: \r\n\r\n\t@author Logan Rickert\r\n\t@version 0.0.0 07-21-2015 10:24:28\r\n\t@updated 07-21-2015 10:24:28\r\n*/\r\n\r\n#include \"include/Util/Print.h\"\r\n\r\nPrint::Print() {\r\n\r\n}\r\n\r\nPrint::~Print() {\r\n\r\n}\r\n```\r\n\r\ntree of lib and include:\r\n\r\n```\r\n├── include\r\n│   └── Util\r\n│       └── Print.h\r\n├── lib\r\n│   ├── compiled\r\n│   └── Util\r\n│       └── Print.cpp\r\n```\r\n\r\nNow lets build like normal:\r\n\r\n```\r\ncpp-man build . . .\r\n```\r\n\r\ntree of lib and include:\r\n\r\n```\r\n├── include\r\n│   └── Util\r\n│       └── Print.h\r\n├── lib\r\n│   ├── compiled\r\n│   │   └── lib.Util.Print.a\r\n│   └── Util\r\n│       └── Print.cpp\r\n```\r\n\r\n## Final Git Log:\r\n\r\n```\r\ncommit 53e20e9bd19a10c30bdb98796a2504046fcea637\r\nAuthor: Logan Rickert <myemail>\r\nDate:   Tue Jul 21 10:53:42 2015 -0400\r\n\r\n    Added 'testOther' namespace and initial Main.cpp.\r\n\r\ncommit 48396f4cdfa24bda8a3059409c49d9c17e36b8a3\r\nAuthor: Logan Rickert <myemail>\r\nDate:   Tue Jul 21 10:45:17 2015 -0400\r\n\r\n    Added a util print function and #include \"*.h\"s to Main.\r\n\r\ncommit 6f467fb0aebbe3351e2b85e5ff17baa46fd9d97d\r\nAuthor: Logan Rickert <myemail>\r\nDate:   Tue Jul 21 10:30:26 2015 -0400\r\n\r\n    Added 'Student' cpp and h to 'test' namespace.\r\n\r\ncommit 293d1f5038e68b2b4dde4f7870a0286f684c9c2e\r\nAuthor: Logan Rickert <myemail>\r\nDate:   Tue Jul 21 10:24:28 2015 -0400\r\n\r\n    Added 'Person' cpp and h to 'test' namespace.\r\n\r\ncommit 634bbc170f57a0602006fd9d2c9ac6be31a98c2e\r\nAuthor: Logan Rickert <myemail>\r\nDate:   Tue Jul 21 09:49:21 2015 -0400\r\n\r\n    Initial project setup.\r\n```\r\n\r\nA pretty nice log if I do say so myself for only actually\r\nwriting one commit message.\r\n\r\n## Future Features\r\n\r\n* Fix @updated and @version to work again\r\n* Don't run ./namespace is CMake and make fails.\r\n* Autogenerate docs\r\n* On building of file, it organizes class files (Not Main) functions alphabetically.\r\n* On building of file, it organizes #include <> and #include \"\" alphabetically. \r\n* cleanup of build/namespace\r\n* A 'create library' function to easily create a library class.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}