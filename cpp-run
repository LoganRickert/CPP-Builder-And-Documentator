#!/bin/bash

APP_NAME=cpp-run
app_src_dir=/usr/local/src/$APP_NAME/src
app_bin_path=/usr/local/src/$APP_NAME/bin
OUTPUT_PATH=~/cpp-workspace

##############################################
#####                                    #####
#####              Functions             #####
#####                                    #####
##############################################

# This is called whenever not enough arguments are given.
# It needs to be slightly redone and give the user more 
# information.
errorAndQuit() {
    # Refactor
    echo "Error: '$APP_NAME help' for information."
    exit
}

# This returns the time as formated as %T
timestamp() {
  date + "%T"
}

findCppManager() {
    found="false"
    directory="$(pwd)"

    while ! $found && [[ "$directory" == "/"* ]]
    do
        if [ -d "$directory/.cpp-manager" ];
            then
                found=true
            else
                directory=${directory%/*}
        fi
    done

    if ! $found;
        then
            directory="error"
    fi

    echo $directory
}

# This creates a new namespace
# It creates a ns directory for build and src.
# It also adds a Main.cpp to the src/ns and parses it.
# Arguments:
#     $1 - project_name;   IE: MySweetProject
#    $2 - namespace;       IE: MySweetNamespace
createNewNamespace() {
    project_name=$1
    namespace=$2
    project_space=$OUTPUT_PATH/$project_name

    mkdir -p "$project_space/build/$namespace/Release"
    mkdir -p "$project_space/build/$namespace/Debug"
    mkdir -p "$project_space/src/$namespace/include"
    mkdir -p "$project_space/src/$namespace/src"
    mkdir -p "$project_space/src/$namespace/doc"

    cp "$app_src_dir/default_main.cpp" "$project_space/src/$namespace/src/Main.cpp"

    python "$app_bin_path/parse_new_files.py" "namespace" "$project_space/src/$namespace" "$project_name" "$namespace" "Main"

    cd $project_space
    git add src/$namespace
    git commit -m "Added '$namespace' namespace and initial Main.cpp." > /dev/null
}

# This method creates a new class for the given class_name inside
# the given namespace inside the given project_name.
# It creates a class_name.cpp and a class_name.h and processes
# the template file. class_args are default member variables you
# want to be added automatically. It adds the member variables to
# the header and class and also adds default getters and setters.
# Arguments:
#     $1 - project_name;     IE: MySweetProject
#    $2 - namespace;         IE: MySweetNamespace
#    $3 - class_name;        IE: MySweetClass
#    $4 ... $n - class_args; IE: std::string name int age
createNewClass() {
    project_name=$1
    namespace=$2
    class_name=$3
    class_args=${@:4}

    project_space=$OUTPUT_PATH/$project_name
    namespace_space=$project_space/src/$namespace

    cp "$app_src_dir/default_class.cpp" "$namespace_space/src/$class_name.cpp"
    cp "$app_src_dir/default_header.h" "$namespace_space/include/$class_name.h"

    python "$app_bin_path/parse_new_files.py" "class" "$namespace_space/" "$project_name" "$namespace" "$class_name" $class_args
    python "$app_bin_path/update_files.py" "add_class" "$namespace_space/src/Main.cpp" "$class_name" "$namespace"

    cd $project_space
    git add src/$namespace/src/$class_name.cpp
    git add src/$namespace/include/$class_name.h
    git commit -m "Added '$class_name' cpp and h to '$namespace' namespace." > /dev/null
}

# This method creates a new project at ~/cpp-workspace/$project_name
# It creates a project_name bin, doc, include and lib.
# Arguments:
#     $1 - project_name    IE: MySweetProject
createNewProject() {
    project_name=$1

    project_space=$OUTPUT_PATH/$project_name

    mkdir -p "$project_space/bin"
    mkdir -p "$project_space/doc"
    mkdir -p "$project_space/include/$project_name"
    mkdir -p "$project_space/lib/compiled"
    mkdir -p "$project_space/.cpp-manager"

    cd $project_space
    git init > /dev/null
    cp "$app_src_dir/gitignore-default" "$project_space/.gitignore"
    git add .
    git commit -m "Initial project setup." > /dev/null

    createNewNamespace $project_name $project_name
}

# This method generates a CMakefile for the project_name / namespace
# Arguments:
#     $1 - project_name      IE: MySweetProject
#     $1 - namespace         IE: MySweetNamespace
#     $3 - build_type        IE: Debug IE: Release
createCMakeFile() {
    project_name=$1
    namespace=$2
    build_type=$3

    project_space=$OUTPUT_PATH/$project_name

    src_dir=$project_space/src
    output_bin=$project_space/bin
    build_dir=$project_space/build/$namespace/$build_type
    include_dir=$project_space/include
    lib_dir=$project_space/lib

    rm $build_dir/temp* 2> /dev/null

    touch $build_dir/temp
    touch $build_dir/temp2

    printf "cmake_minimum_required(VERSION 2.8)\n\n" > $build_dir/CMakeLists.txt
    printf "project(\"$namespace\")\n\n" >> $build_dir/CMakeLists.txt

    printf "include_directories(\"$src_dir\")\n" >> $build_dir/CMakeLists.txt

    printf "include_directories(\"$project_space\")\n\n" >> $build_dir/CMakeLists.txt

    printf "add_executable(\"$namespace\"\n" >> $build_dir/CMakeLists.txt

    for f in $(find $src_dir/$namespace/src -name *.cpp);
    do
        printf "\t\"$f\"\n" >> $build_dir/CMakeLists.txt
    done

    printf ")\n\n" >> $build_dir/CMakeLists.txt


    for f in $(find $src_dir/ \( -name "*.cpp" -o -name "*.h" \));
    do
        result="$(cat $f | grep "#include \"include/")"
        if ! [[ $result == "" ]];
            then
                echo "${result/\" #/\n}" >> $build_dir/temp
        fi
    done

     cat $build_dir/temp | sort -u | while read line;
    do
        name=${line:18}
        name=${name::-3}

        echo $name

        printf "add_library(\".${name/"/"/"."}\" STATIC \"$lib_dir/$name.cpp\")\n" >> $build_dir/CMakeLists.txt
        printf "target_link_libraries(\"$namespace\" \".${name/"/"/"."}\")\n\n" >> $build_dir/CMakeLists.txt

        echo "\".${name/"/"/"."}\" " >> $build_dir/temp2
    done

    printf "set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY $lib_dir/compiled)\n" >> $build_dir/CMakeLists.txt
    printf "set(CMAKE_LIBRARY_OUTPUT_DIRECTORY $lib_dir/compiled)\n" >> $build_dir/CMakeLists.txt
    printf "set(CMAKE_RUNTIME_OUTPUT_DIRECTORY $output_bin)\n" >> $build_dir/CMakeLists.txt

    printf "\nset_target_properties(\"$namespace\"\n" >> $build_dir/CMakeLists.txt

    for f in $(cat $build_dir/temp2)
    do
        printf "\t$f\n" >> $build_dir/CMakeLists.txt
    done

    printf "\tPROPERTIES\n" >> $build_dir/CMakeLists.txt
    printf "\tARCHIVE_OUTPUT_DIRECTORY \"$lib_dir/compiled\"\n" >> $build_dir/CMakeLists.txt
    printf "\tLIBRARY_OUTPUT_DIRECTORY \"$lib_dir/compiled\"\n" >> $build_dir/CMakeLists.txt
    printf "\tRUNTIME_OUTPUT_DIRECTORY \"$output_bin\"\n" >> $build_dir/CMakeLists.txt
    printf ")\n" >> $build_dir/CMakeLists.txt
}

# This method generates a Makefile for the directory given.
# Arguments:
#     $1 - build_dir    IE: $project_path/build/$namespace/$build_type
createMakefile() {
    build_dir=$1

    cd $build_dir
    cmake -G "Unix Makefiles" > /dev/null
}

# This runs the make file in the directory given.
# Arguments:
#     $1 - build_dir    IE: $project_path/build/$namespace/$build_type
runMakefile() {
    build_dir=$1
    
    cd $build_dir
    make > /dev/null
}

##############################################
#####                                    #####
#####          Start of program          #####
#####                                    #####
##############################################

project_dir=$(findCppManager)

if [[ "$project_dir" != "error" ]]
    then
        echo "found at $project_dir"
    else
        echo "Wasn't able to find cpp workspace!"
        errorAndQuit
fi

if [[ "$1" != "create" &&  "$1" != "build" ]];
    then
        errorAndQuit
fi

if [[ "$1" == "build" ]];
    then
        if [[ -z "$3" ]];
            then 
                errorAndQuit
        fi

        project_name=$2

        if [[ "$3" == "." ]];
            then
                namespace=$2
            else
                namespace=$3
        fi

        if [[ -z "$4" ]];
            then
                build_type="Debug"
            else
                build_type=$4
        fi

        current_time=$(timestamp)

        project_path=$OUTPUT_PATH/$project_name

        output_bin=$project_path/bin
        build_dir=$project_path/build/$namespace/$build_type

        createCMakeFile $project_name $namespace $build_type

        any_errors="no"

        clear

        if ! createMakefile $build_dir;
            then
                echo "CMake Bad"
                any_errors="yes"
        fi
        
        if ! runMakefile $build_dir;
            then
                any_errors="yes"
                echo "Make Bad"
        fi

        if [[ "$any_errors" == "no" && -z "$5" ]];
            then
                cd $project_path
                git add .
                git commit -a
        fi

        if [[ "$any_errors" == "no" ]];
            then
                clear
                $output_bin/$namespace
            else
                echo "Build failed! Please review the errors."
        fi
fi

if [[ "$1" == "create" ]];
    then
        # Check to make sure the thing to create has a name.
        if [ -z "$3" ];
            then 
                errorAndQuit
        fi

        if [[ "$2" == "project" ]];
            then
                project_name=$3

                createNewProject $project_name
        fi;

        if [[ "$2" == "class" ]];
            then
                if [[ -z "$5" ]];
                    then 
                        errorAndQuit
                fi

                project_name=$3
                namespace=$4
                class_name=$5
                class_args=${@:6}

                createNewClass $project_name $namespace $class_name $class_args
        fi;

        if [[ "$2" == "namespace" ]];
            then
                if [[ -z "$4" ]];
                    then 
                        errorAndQuit
                fi

                project_name=$3
                namespace=$4

                createNewNamespace $project_name $namespace
        fi;
fi;
