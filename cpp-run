#!/bin/bash

APP_NAME=cpp-run
src_dir=/usr/local/src/$APP_NAME/src
BIN_PATH=/usr/local/src/$APP_NAME/bin
OUTPUT_PATH=~/cpp-workspace

errorAndQuit() {
	# Refactor
	echo "Error: '$APP_NAME help' for information."
	exit
}

timestamp() {
  date +"%T"
}

createNewNamespace() {
	project_name=$1
	namespace=$2
	project_space=$OUTPUT_PATH/$project_name

	mkdir -p "$project_space/build/$namespace/Release"
	mkdir -p "$project_space/build/$namespace/Debug"
	mkdir -p "$project_space/src/$namespace/include"
	mkdir -p "$project_space/src/$namespace/src"
	mkdir -p "$project_space/src/$namespace/doc"

	cp "$src_dir/default_main.cpp" "$project_space/src/$namespace/src/Main.cpp"

	python "$BIN_PATH/parse_new_files.py" "$project_space/src/$namespace" "." "namespace" "$project_name" "$namespace" "Main"

	cd $project_space
	git add src/$namespace
	git commit -m "Added '$namespace' namespace and initial Main.cpp." > /dev/null
}

# createNewProject() {

# }

if [[ "$1" != "create" &&  "$1" != "build" ]];
	then
		errorAndQuit
fi

if [[ "$1" == "build" ]];
	then
		if [[ -z "$3" ]];
			then 
				errorAndQuit
		fi

		project_name=$2

		if [[ "$3" == "." ]];
			then
				namespace=$2
			else
				namespace=$3
		fi

		if [[ -z "$4" ]];
			then
				build_type="Debug"
			else
				build_type=$4
		fi

		current_time=$(timestamp)

		project_path=$OUTPUT_PATH/$project_name
		src_dir=$OUTPUT_PATH/$project_name/src
		output_bin=$OUTPUT_PATH/$project_name/bin
		build_dir=$OUTPUT_PATH/$project_name/build/$namespace/$build_type
		include_dir=$OUTPUT_PATH/$project_name/include
		lib_dir=$OUTPUT_PATH/$project_name/lib
		g_include_dir=$OUTPUT_PATH/$project_name/

		mkdir -p $output_bin/old/
		mv $output_bin/*.* $output_bin/old/ 2> /dev/null

		rm $build_dir/temp* 2> /dev/null

		touch $build_dir/temp
		touch $build_dir/temp2

		no_errors="yes"
		built_file="no"

		# cmake -G "Unix Makefiles"

		printf "cmake_minimum_required(VERSION 2.8)\n\n" > $build_dir/CMakeLists.txt
		printf "project(\"$namespace\")\n\n" >> $build_dir/CMakeLists.txt

		printf "include_directories(\"$src_dir\")\n" >> $build_dir/CMakeLists.txt

		# for f in $src_dir/*;
		# do
		# 	printf "include_directories(\"$f\")\n" >> $build_dir/CMakeLists.txt
		# done

		printf "include_directories(\"$g_include_dir\")\n\n" >> $build_dir/CMakeLists.txt

		printf "add_executable(\"$namespace\"\n" >> $build_dir/CMakeLists.txt

		for f in $(find $src_dir/$namespace/src -name *.cpp);
		do
			printf "\t\"$f\"\n" >> $build_dir/CMakeLists.txt
		done

		printf ")\n\n" >> $build_dir/CMakeLists.txt


		for f in $(find $src_dir/ \( -name "*.cpp" -o -name "*.h" \));
		do
			result="$(cat $f | grep "#include \"include/")"
			if ! [[ $result == "" ]];
				then
					echo "${result/\" #/\n}" >> $build_dir/temp
			fi
		done

	 	cat $build_dir/temp | sort -u | while read line;
		do
			name=${line:18}
			name=${name::-3}

			echo $name

			printf "add_library(\".${name/"/"/"."}\" STATIC \"$lib_dir/$name.cpp\")\n" >> $build_dir/CMakeLists.txt
			printf "target_link_libraries(\"$namespace\" \".${name/"/"/"."}\")\n\n" >> $build_dir/CMakeLists.txt

			echo "\".${name/"/"/"."}\" " >> $build_dir/temp2
		done

		printf "set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY $lib_dir/compiled)\n" >> $build_dir/CMakeLists.txt
		printf "set(CMAKE_LIBRARY_OUTPUT_DIRECTORY $lib_dir/compiled)\n" >> $build_dir/CMakeLists.txt
		printf "set(CMAKE_RUNTIME_OUTPUT_DIRECTORY $output_bin)\n" >> $build_dir/CMakeLists.txt

		printf "\nset_target_properties(\"$namespace\"\n" >> $build_dir/CMakeLists.txt

		for f in $(cat $build_dir/temp2)
		do
			printf "\t$f\n" >> $build_dir/CMakeLists.txt
		done

		printf "\tPROPERTIES\n" >> $build_dir/CMakeLists.txt
		printf "\tARCHIVE_OUTPUT_DIRECTORY \"$lib_dir/compiled\"\n" >> $build_dir/CMakeLists.txt
    	printf "\tLIBRARY_OUTPUT_DIRECTORY \"$lib_dir/compiled\"\n" >> $build_dir/CMakeLists.txt
    	printf "\tRUNTIME_OUTPUT_DIRECTORY \"$output_bin\"\n" >> $build_dir/CMakeLists.txt
		printf ")\n" >> $build_dir/CMakeLists.txt

		rm $build_dir/temp* 2> /dev/null

		cd $build_dir
		cmake -G "Unix Makefiles" > /dev/null
		make > /dev/null

		if [[ -z "$5" ]];
			then
				cd $OUTPUT_PATH/$project_name
				git add .
				git commit -a
		fi

		clear
		$output_bin/$namespace
fi

if [[ "$1" == "create" ]];
	then
		# Check to make sure the thing to create has a name.
		if [ -z "$3" ];
			then 
				errorAndQuit
		fi

		if [[ "$2" == "project" ]];
			then
				project_name=$3

				mkdir -p "$OUTPUT_PATH/$project_name/bin"
				mkdir -p "$OUTPUT_PATH/$project_name/build/$project_name/Release"
				mkdir -p "$OUTPUT_PATH/$project_name/build/$project_name/Debug"
				mkdir -p "$OUTPUT_PATH/$project_name/doc"
				mkdir -p "$OUTPUT_PATH/$project_name/include"
				mkdir -p "$OUTPUT_PATH/$project_name/include/$project_name"
				mkdir -p "$OUTPUT_PATH/$project_name/lib"
				mkdir -p "$OUTPUT_PATH/$project_name/lib/compiled"
				# Include, sample, scr
				mkdir -p "$OUTPUT_PATH/$project_name/src/"
				mkdir -p "$OUTPUT_PATH/$project_name/src/$project_name/include"
				mkdir -p "$OUTPUT_PATH/$project_name/src/$project_name/src"
				mkdir -p "$OUTPUT_PATH/$project_name/src/$project_name/doc"

				cp "$src_dir/default_main.cpp" "$OUTPUT_PATH/$project_name/src/$project_name/src/Main.cpp"

				python "$BIN_PATH/parse_new_files.py" "$OUTPUT_PATH/$project_name/src/$namespace" "$@"

				cd $OUTPUT_PATH/$project_name/
				git init > /dev/null
				# Make a .gitignore default mate.
				echo 'bin/' > .gitignore
				echo 'build/' >> .gitignore
				echo 'lib/compiled' >> .gitignore
				git add .
				git commit -m "Initial project setup." > /dev/null
		fi;

		if [[ "$2" == "class" ]];
			then
				if [[ -z "$5" ]];
					then 
						errorAndQuit
				fi

				project_name=$3
				namespace=$4
				CLASS_NAME=$5

				cp "$src_dir/default_class.cpp" "$OUTPUT_PATH/$project_name/src/$namespace/src/$CLASS_NAME.cpp"
				cp "$src_dir/default_header.h" "$OUTPUT_PATH/$project_name/src/$namespace/include/$CLASS_NAME.h"

				python "$BIN_PATH/parse_new_files.py" "$OUTPUT_PATH/$project_name/src/$namespace/" "$@"
				python "$BIN_PATH/update_files.py" "add_class" "$OUTPUT_PATH/$project_name/src/$namespace/src/Main.cpp" "$CLASS_NAME" "$namespace"

				cd $OUTPUT_PATH/$project_name/
				git add src/$namespace/src/$CLASS_NAME.cpp
				git add src/$namespace/include/$CLASS_NAME.h
				git commit -m "Added '$CLASS_NAME' cpp and h to '$namespace' namespace." > /dev/null
		fi;

		if [[ "$2" == "namespace" ]];
			then
				if [[ -z "$4" ]];
					then 
						errorAndQuit
				fi

				project_name=$3
				namespace=$4

				createNewNamespace $project_name $namespace
		fi;
fi;
